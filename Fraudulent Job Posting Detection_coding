{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "name": "Copy of fake-job-posting-prediction-lr-knn-svc.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.6"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XfUoP9FHTmGi",
        "outputId": "a41139f4-fa27-4cfd-c01b-0c47e6e0879d"
      },
      "source": [
        "from google.colab import drive\n",
        "import pandas as pd\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mounted at /content/drive\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7RZEI20KTkk1"
      },
      "source": [
        "import numpy as np # linear algebra\n",
        "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import nltk\n",
        "\n",
        "\n",
        "import os\n",
        "for dirname, _, filenames in os.walk('/content/drive/my drive/HKUST'):\n",
        "    for filename in filenames:\n",
        "        print(os.path.join(dirname, filename))\n",
        "\n"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 547
        },
        "id": "wTZ_z6ZYTkk3",
        "outputId": "9bcc7c18-be8c-47f7-a121-ccc55007b735"
      },
      "source": [
        "df = pd.read_csv('/content/drive//My Drive/HKUST/fake_job_postings.csv')\n",
        "df.head()"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>job_id</th>\n",
              "      <th>title</th>\n",
              "      <th>location</th>\n",
              "      <th>department</th>\n",
              "      <th>salary_range</th>\n",
              "      <th>company_profile</th>\n",
              "      <th>description</th>\n",
              "      <th>requirements</th>\n",
              "      <th>benefits</th>\n",
              "      <th>telecommuting</th>\n",
              "      <th>has_company_logo</th>\n",
              "      <th>has_questions</th>\n",
              "      <th>employment_type</th>\n",
              "      <th>required_experience</th>\n",
              "      <th>required_education</th>\n",
              "      <th>industry</th>\n",
              "      <th>function</th>\n",
              "      <th>fraudulent</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Marketing Intern</td>\n",
              "      <td>US, NY, New York</td>\n",
              "      <td>Marketing</td>\n",
              "      <td>NaN</td>\n",
              "      <td>We're Food52, and we've created a groundbreaki...</td>\n",
              "      <td>Food52, a fast-growing, James Beard Award-winn...</td>\n",
              "      <td>Experience with content management systems a m...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>Other</td>\n",
              "      <td>Internship</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Marketing</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>Customer Service - Cloud Video Production</td>\n",
              "      <td>NZ, , Auckland</td>\n",
              "      <td>Success</td>\n",
              "      <td>NaN</td>\n",
              "      <td>90 Seconds, the worlds Cloud Video Production ...</td>\n",
              "      <td>Organised - Focused - Vibrant - Awesome!Do you...</td>\n",
              "      <td>What we expect from you:Your key responsibilit...</td>\n",
              "      <td>What you will get from usThrough being part of...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>Full-time</td>\n",
              "      <td>Not Applicable</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Marketing and Advertising</td>\n",
              "      <td>Customer Service</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Commissioning Machinery Assistant (CMA)</td>\n",
              "      <td>US, IA, Wever</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Valor Services provides Workforce Solutions th...</td>\n",
              "      <td>Our client, located in Houston, is actively se...</td>\n",
              "      <td>Implement pre-commissioning and commissioning ...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Account Executive - Washington DC</td>\n",
              "      <td>US, DC, Washington</td>\n",
              "      <td>Sales</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Our passion for improving quality of life thro...</td>\n",
              "      <td>THE COMPANY: ESRI – Environmental Systems Rese...</td>\n",
              "      <td>EDUCATION: Bachelor’s or Master’s in GIS, busi...</td>\n",
              "      <td>Our culture is anything but corporate—we have ...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>Full-time</td>\n",
              "      <td>Mid-Senior level</td>\n",
              "      <td>Bachelor's Degree</td>\n",
              "      <td>Computer Software</td>\n",
              "      <td>Sales</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>Bill Review Manager</td>\n",
              "      <td>US, FL, Fort Worth</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>SpotSource Solutions LLC is a Global Human Cap...</td>\n",
              "      <td>JOB TITLE: Itemization Review ManagerLOCATION:...</td>\n",
              "      <td>QUALIFICATIONS:RN license in the State of Texa...</td>\n",
              "      <td>Full Benefits Offered</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>Full-time</td>\n",
              "      <td>Mid-Senior level</td>\n",
              "      <td>Bachelor's Degree</td>\n",
              "      <td>Hospital &amp; Health Care</td>\n",
              "      <td>Health Care Provider</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   job_id  ... fraudulent\n",
              "0       1  ...          0\n",
              "1       2  ...          0\n",
              "2       3  ...          0\n",
              "3       4  ...          0\n",
              "4       5  ...          0\n",
              "\n",
              "[5 rows x 18 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bzMUYiigTkk4"
      },
      "source": [
        "# 1. Preprocessing and Cleaning\n",
        "\n",
        "## 1.1. Missing Values"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-HPE9zOCTkk4",
        "outputId": "2021f649-db28-4984-d6ec-fe99ceada31b"
      },
      "source": [
        "print(df.isna().sum()*100/df.shape[0])\n"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "job_id                  0.000000\n",
            "title                   0.000000\n",
            "location                1.935123\n",
            "department             64.580537\n",
            "salary_range           83.959732\n",
            "company_profile        18.501119\n",
            "description             0.005593\n",
            "requirements           15.072707\n",
            "benefits               40.324385\n",
            "telecommuting           0.000000\n",
            "has_company_logo        0.000000\n",
            "has_questions           0.000000\n",
            "employment_type        19.412752\n",
            "required_experience    39.429530\n",
            "required_education     45.329978\n",
            "industry               27.421700\n",
            "function               36.101790\n",
            "fraudulent              0.000000\n",
            "dtype: float64\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "s4rFgF18Tkk4",
        "outputId": "84c8c03d-67a5-42e6-ad94-a8bf24de8ed4"
      },
      "source": [
        "to_drop = ['job_id','title','department','salary_range','company_profile','requirements','benefits']\n",
        "\n",
        "df = df.drop(to_drop, axis = 1).sort_index() #drop columns that aren't needed\n",
        "\n",
        "df = df.dropna(subset = ['description', 'location'])\n",
        "df.shape"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(17533, 11)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "V5WDX5hxTkk4"
      },
      "source": [
        "## 1.2. Preprocessing"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "W6oMvvzaTkk4"
      },
      "source": [
        "import re\n",
        "import nltk\n",
        "from nltk.corpus import stopwords\n",
        "from nltk.stem import PorterStemmer\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\n",
        "from sklearn import model_selection, naive_bayes\n",
        "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n"
      ],
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vGO5Kr61Tkk4",
        "outputId": "95835430-8101-40b4-b395-5c142a961a2e"
      },
      "source": [
        "nltk.download('stopwords')\n",
        "stemmer = PorterStemmer() \n",
        "stop_words = stopwords.words('english')\n",
        "\n",
        "def preprocess(text):\n",
        "    text = re.sub('[^a-zA-Z\\s]', '', text) #tokenizatoin\n",
        "    text = text.lower() #to lower case\n",
        "    split = text.split() #getting rid of stop words and Porter2 stemming\n",
        "    for word in split :\n",
        "      if word in stop_words :\n",
        "        word = ''\n",
        "      else :\n",
        "        stemmer.stem(word)\n",
        "    return ' '.join([word for word in split])\n",
        "\n",
        "df['description'] = df['description'].apply(preprocess)\n",
        "\n",
        "df['description'].head()\n"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/stopwords.zip.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    food a fastgrowing james beard awardwinning on...\n",
              "1    organised focused vibrant awesomedo you have a...\n",
              "2    our client located in houston is actively seek...\n",
              "3    the company esri environmental systems researc...\n",
              "4    job title itemization review managerlocation f...\n",
              "Name: description, dtype: object"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qW-3H9aZTkk4"
      },
      "source": [
        "## 1.3. Preparation of Dataset"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DQs4qCldTkk4"
      },
      "source": [
        "#define the variables\n",
        "x = df['description']\n",
        "y = df['fraudulent']\n",
        "\n",
        "#split it into training and test sets\n",
        "x_train, x_test, y_train, y_test = model_selection.train_test_split(x, y, test_size=0.2, random_state=42)\n",
        "\n",
        "#encoding\n",
        "encoder = LabelEncoder()\n",
        "y_train = encoder.fit_transform(y_train)\n",
        "y_test = encoder.fit_transform(y_test)\n",
        "\n",
        "#vectorization\n",
        "MAX = 2000\n",
        "vectorizer = TfidfVectorizer(max_features = MAX)\n",
        "vectorizer.fit(x_train)\n",
        "\n",
        "x_trainvec = vectorizer.transform(x_train)\n",
        "x_testvec = vectorizer.transform(x_test)\n",
        "\n"
      ],
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-Qeo2LlVTkk4"
      },
      "source": [
        "# 2. Model\n",
        "\n",
        "## 2.1. Base Models\n",
        "\n",
        "### 2.1.1. Logistic Regression"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "avJaRUJzTkk4",
        "outputId": "14995bf8-ca37-4c1d-8407-4af1304b67d2"
      },
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "\n",
        "# fit \n",
        "logreg = LogisticRegression()\n",
        "logreg.fit(x_trainvec, y_train)\n",
        "\n",
        "# predict\n",
        "y_pred_lr = logreg.predict(x_testvec)\n",
        "\n",
        "# accuracy\n",
        "print(\"Accuracy Score of LogReg :\", accuracy_score(y_pred_lr, y_test), \"\\n\") #96.3%\n",
        "\n",
        "# confusion matrix \n",
        "print(\"Confusion Matrix of LogReg:\\n\", confusion_matrix(y_test, y_pred_lr), \"\\n\") # [[3324, 0], [128, 55]]\n",
        "\n",
        "#classifcation report\n",
        "print(\"Classification Report of LogReg:\\n\", classification_report(y_test, y_pred_lr), \"\\n\")"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy Score of LogReg : 0.9635015682919874 \n",
            "\n",
            "Confusion Matrix of LogReg:\n",
            " [[3324    0]\n",
            " [ 128   55]] \n",
            "\n",
            "Classification Report of LogReg:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.96      1.00      0.98      3324\n",
            "           1       1.00      0.30      0.46       183\n",
            "\n",
            "    accuracy                           0.96      3507\n",
            "   macro avg       0.98      0.65      0.72      3507\n",
            "weighted avg       0.96      0.96      0.95      3507\n",
            " \n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "laQ3NMe-xcHV",
        "outputId": "fb6151b3-2dc7-4d7b-b36f-c18d9154a8fd"
      },
      "source": [
        "logreg.predict(x_testvec)"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 0, 0, ..., 0, 0, 0])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LWR3ausColJ4"
      },
      "source": [
        "from sklearn.model_selection import cross_val_score,cross_val_predict\n",
        "from sklearn.metrics import classification_report\n",
        "from sklearn.metrics import confusion_matrix\n",
        "from sklearn.metrics import roc_curve\n",
        "from sklearn.metrics import auc\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4m9GfsqJomRY",
        "outputId": "6963b2a1-7d35-4d7b-fc04-7b0314925c7d"
      },
      "source": [
        "y_pred_prob = cross_val_predict(logreg,x_testvec,y_test,cv=10, method ='predict_proba')\n",
        "y_pred_prob"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.95713605, 0.04286395],\n",
              "       [0.96055566, 0.03944434],\n",
              "       [0.94498662, 0.05501338],\n",
              "       ...,\n",
              "       [0.96480903, 0.03519097],\n",
              "       [0.95691559, 0.04308441],\n",
              "       [0.9505137 , 0.0494863 ]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tLksNqDComU4",
        "outputId": "e12c59d9-a910-4cf6-acc4-5576eb75ceb9"
      },
      "source": [
        "fpr1, tpr1, thresholds1 = roc_curve(y_test, y_pred_prob[:,1], pos_label=1)\n",
        "roc_auc=auc(fpr,tpr)\n",
        "roc_auc"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.897131640725178"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "Zn8CWDHKolSy",
        "outputId": "a25afa4f-91b3-4872-ff1e-e51eab651c34"
      },
      "source": [
        "plt.figure()\n",
        "lw = 2\n",
        "plt.plot(fpr, tpr,color='crimson',\n",
        "         lw=lw, label='ROC curve (area = %0.2f)' % roc_auc)\n",
        "plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\n",
        "plt.xlim([-0.05, 1.0])\n",
        "plt.ylim([0.0, 1.05])\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.title('Receiver operating characteristic')\n",
        "plt.legend(loc=\"lower right\")\n",
        "plt.savefig('plot.png', dpi=300, bbox_inches='tight')\n",
        "plt.show()\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "u9I5Q21YolWk"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xsfDQVgGTkk5"
      },
      "source": [
        "### 2.1.2. SVC"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xjFhxl_VTkk5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "82f233a0-8046-4234-ea9b-3f0ee110693b"
      },
      "source": [
        "from sklearn.svm import SVC,LinearSVC\n",
        "\n",
        "svc = SVC(kernel = 'rbf', probability=True)\n",
        "svc.fit(x_trainvec, y_train)\n",
        "\n",
        "y_pred_svc = svc.predict(x_testvec)\n",
        "\n",
        "# accuracy\n",
        "print(\"Accuracy Score of SVC :\", accuracy_score(y_pred_svc, y_test), \"\\n\") #97.3%\n",
        "\n",
        "# confusion matrix \n",
        "print(\"Confusion Matrix of SVC:\\n\", confusion_matrix(y_test, y_pred_svc), \"\\n\") # [[3324, 0], [96, 87]]\n",
        "\n",
        "# classifcation report\n",
        "print(\"Classification Report of SVC:\\n\", classification_report(y_test, y_pred_svc), \"\\n\")"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy Score of SVC : 0.9726261762189906 \n",
            "\n",
            "Confusion Matrix of SVC:\n",
            " [[3324    0]\n",
            " [  96   87]] \n",
            "\n",
            "Classification Report of SVC:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.97      1.00      0.99      3324\n",
            "           1       1.00      0.48      0.64       183\n",
            "\n",
            "    accuracy                           0.97      3507\n",
            "   macro avg       0.99      0.74      0.82      3507\n",
            "weighted avg       0.97      0.97      0.97      3507\n",
            " \n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "q4OWhdcMfruB"
      },
      "source": [
        "from sklearn.model_selection import cross_val_score,cross_val_predict\n",
        "from sklearn.metrics import classification_report\n",
        "from sklearn.metrics import confusion_matrix\n",
        "from sklearn.metrics import roc_curve\n",
        "from sklearn.metrics import auc\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DlDAhedJfr2l",
        "outputId": "7a02993e-c7a8-4f88-e390-4f05a8abc3c4"
      },
      "source": [
        "y_pred_prob = cross_val_predict(svc,x_testvec,y_test,cv=10, method ='predict_proba')\n",
        "y_pred_prob"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.99512958, 0.00487042],\n",
              "       [0.98697384, 0.01302616],\n",
              "       [0.98247291, 0.01752709],\n",
              "       ...,\n",
              "       [0.95474   , 0.04526   ],\n",
              "       [0.98380857, 0.01619143],\n",
              "       [0.98660694, 0.01339306]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "waJg_KOgfwuE",
        "outputId": "68c38b5d-6102-4b59-d570-86002f86ed12"
      },
      "source": [
        "fpr2, tpr2, thresholds2 = roc_curve(y_test, y_pred_prob[:,1], pos_label=1)\n",
        "roc_auc=auc(fpr,tpr)\n",
        "roc_auc"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.9145772096295858"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "_ytXFTDffwx9",
        "outputId": "558572cc-061a-4be8-8a44-35c975be76f3"
      },
      "source": [
        "plt.figure()\n",
        "lw = 2\n",
        "plt.plot(fpr, tpr,color='forestgreen',\n",
        "         lw=lw, label='ROC curve (area = %0.2f)' % roc_auc)\n",
        "plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\n",
        "plt.xlim([-0.05, 1.0])\n",
        "plt.ylim([0.0, 1.05])\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.title('Receiver operating characteristic')\n",
        "plt.legend(loc=\"lower right\")\n",
        "plt.savefig('plot.png', dpi=300, bbox_inches='tight')\n",
        "plt.show()\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UeOticfsRnUF"
      },
      "source": [
        "##2.1.3.random forest"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vHYTl-xaUZKn",
        "outputId": "417c8bd9-bf00-4461-93d9-bc48ee5119c5"
      },
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "rfc=RandomForestClassifier()\n",
        "rfc.fit(x_trainvec, y_train)"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n",
              "                       criterion='gini', max_depth=None, max_features='auto',\n",
              "                       max_leaf_nodes=None, max_samples=None,\n",
              "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
              "                       min_samples_leaf=1, min_samples_split=2,\n",
              "                       min_weight_fraction_leaf=0.0, n_estimators=100,\n",
              "                       n_jobs=None, oob_score=False, random_state=None,\n",
              "                       verbose=0, warm_start=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LZIHexoNUrh8",
        "outputId": "8515b612-9f17-463b-d437-466cc2ce6608"
      },
      "source": [
        "y_pred_rfc = rfc.predict(x_testvec)\n",
        "\n",
        "# accuracy\n",
        "print(\"Accuracy Score of Random Forest :\", accuracy_score(y_pred_rfc, y_test), \"\\n\")\n",
        "\n",
        "# confusion matrix \n",
        "print(\"Confusion Matrix of Random Forest:\\n\", confusion_matrix(y_test, y_pred_rfc), \"\\n\") \n",
        "\n",
        "# classifcation report\n",
        "print(\"Classification Report of Random Forest:\\n\", classification_report(y_test, y_pred_rfc), \"\\n\")\n"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy Score of Random Forest : 0.9743370402053037 \n",
            "\n",
            "Confusion Matrix of Random Forest:\n",
            " [[3322    2]\n",
            " [  88   95]] \n",
            "\n",
            "Classification Report of Random Forest:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.97      1.00      0.99      3324\n",
            "           1       0.98      0.52      0.68       183\n",
            "\n",
            "    accuracy                           0.97      3507\n",
            "   macro avg       0.98      0.76      0.83      3507\n",
            "weighted avg       0.97      0.97      0.97      3507\n",
            " \n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lKlwVNLwWXqK"
      },
      "source": [
        "from sklearn.model_selection import cross_val_score,cross_val_predict\n",
        "from sklearn.metrics import classification_report\n",
        "from sklearn.metrics import confusion_matrix\n",
        "from sklearn.metrics import roc_curve\n",
        "from sklearn.metrics import auc\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WKrWF82mWuG1"
      },
      "source": [
        "y_pred_prob = cross_val_predict(rfc,x_testvec,y_test,cv=10, method ='predict_proba')\n",
        "y_pred_prob"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UZfBJwSOWusN"
      },
      "source": [
        "fpr, tpr, thresholds = roc_curve(y_test, y_pred_prob[:,1], pos_label=1)\n",
        "roc_auc=auc(fpr,tpr)\n",
        "roc_auc"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xxpy2meGWyDW"
      },
      "source": [
        "plt.figure()\n",
        "lw = 2\n",
        "plt.plot(fpr, tpr,color='darkorange',\n",
        "         lw=lw, label='ROC curve (area = %0.2f)' % roc_auc)\n",
        "plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\n",
        "plt.xlim([-0.05, 1.0])\n",
        "plt.ylim([0.0, 1.05])\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.title('Receiver operating characteristic')\n",
        "plt.legend(loc=\"lower right\")\n",
        "plt.savefig('plot.png', dpi=300, bbox_inches='tight')\n",
        "plt.show()\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wyrgJbHnZbOr"
      },
      "source": [
        "###2.1.4. Multinominal Naive Bayes Classifier"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CuhR_2E9ZX0h"
      },
      "source": [
        "from sklearn.model_selection import cross_val_score,cross_val_predict\n",
        "from sklearn.naive_bayes import MultinomialNB\n",
        "from sklearn.metrics import classification_report\n",
        "from sklearn.metrics import confusion_matrix\n",
        "from sklearn.metrics import roc_curve\n",
        "from sklearn.metrics import auc"
      ],
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bsJGgl6OZf3l",
        "outputId": "d3539265-7b79-4197-d86d-8711a2b36939"
      },
      "source": [
        "mnb = MultinomialNB(alpha = 0.5)\n",
        "mnb.fit(x_trainvec, y_train)"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "MultinomialNB(alpha=0.5, class_prior=None, fit_prior=True)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YyEF0a_5aGsL",
        "outputId": "31aeceba-bd7e-4ae7-eaee-2f80e5b0d805"
      },
      "source": [
        "y_pred_mnb = cross_val_predict(mnb,x_testvec,y_test, cv=10)\n",
        "y_pred_mnb\n",
        "\n",
        "# accuracy\n",
        "print(\"Accuracy Score of Multinominal Naive Bayes Classifier :\", accuracy_score(y_pred_mnb, y_test), \"\\n\")\n",
        "\n",
        "# confusion matrix \n",
        "print(\"Confusion Matrix of Multinominal Naive Bayes Classifier:\\n\", confusion_matrix(y_test, y_pred_mnb), \"\\n\") \n",
        "\n",
        "# classifcation report\n",
        "print(\"Classification Report of Multinominal Naive Bayes Classifier:\\n\", classification_report(y_test, y_pred_mnb), \"\\n\")\n"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy Score of Multinominal Naive Bayes Classifier : 0.951240376390077 \n",
            "\n",
            "Confusion Matrix of Multinominal Naive Bayes Classifier:\n",
            " [[3322    2]\n",
            " [ 169   14]] \n",
            "\n",
            "Classification Report of Multinominal Naive Bayes Classifier:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.95      1.00      0.97      3324\n",
            "           1       0.88      0.08      0.14       183\n",
            "\n",
            "    accuracy                           0.95      3507\n",
            "   macro avg       0.91      0.54      0.56      3507\n",
            "weighted avg       0.95      0.95      0.93      3507\n",
            " \n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FjNusO9KZtVM"
      },
      "source": [
        "y_pred_prob = cross_val_predict(mnb,x_testvec,y_test,cv=10, method ='predict_proba')\n",
        "y_pred_prob"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1hbBTpc_Zyl7"
      },
      "source": [
        "fpr, tpr, thresholds = roc_curve(y_test, y_pred_prob[:,1], pos_label=1)\n",
        "roc_auc=auc(fpr,tpr)\n",
        "roc_auc"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6e-VS4BONEme"
      },
      "source": [
        "##2.2 Combined ROC *curve*"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qc1niKGJNItP"
      },
      "source": [
        "from sklearn.model_selection import cross_val_score,cross_val_predict\n",
        "from sklearn.metrics import classification_report\n",
        "from sklearn.metrics import confusion_matrix\n",
        "from sklearn.metrics import roc_curve\n",
        "from sklearn.metrics import auc\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "y_pred_prob1 = cross_val_predict(logreg,x_testvec,y_test,cv=10, method ='predict_proba')\n",
        "fpr1, tpr1, thresholds1 = roc_curve(y_test, y_pred_prob1[:,1], pos_label=1)\n",
        "roc_auc1=auc(fpr1,tpr1)\n",
        "\n",
        "y_pred_prob2 = cross_val_predict(svc,x_testvec,y_test,cv=10, method ='predict_proba')\n",
        "fpr2, tpr2, thresholds2 = roc_curve(y_test, y_pred_prob2[:,1], pos_label=1)\n",
        "roc_auc2=auc(fpr2,tpr2)\n",
        "\n",
        "y_pred_prob3 = cross_val_predict(rfc,x_testvec,y_test,cv=10, method ='predict_proba')\n",
        "fpr3, tpr3, thresholds3 = roc_curve(y_test, y_pred_prob3[:,1], pos_label=1)\n",
        "roc_auc3=auc(fpr3,tpr3)\n",
        "\n",
        "y_pred_prob4 = cross_val_predict(mnb,x_testvec,y_test,cv=10, method ='predict_proba')\n",
        "fpr4, tpr4, thresholds4 = roc_curve(y_test, y_pred_prob4[:,1], pos_label=1)\n",
        "roc_auc4=auc(fpr4,tpr4)\n"
      ],
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "Fw0TZyOkZWCC",
        "outputId": "18cb6759-8bfd-4284-9021-a82e2ea2bf92"
      },
      "source": [
        "plt.plot([0,1],[0,1], 'k--')\n",
        "plt.plot(fpr1, tpr1, label= \"Logistic Regression(area = %0.2f)\" % roc_auc1)\n",
        "plt.plot(fpr2, tpr2, label= \"SVC(area = %0.2f)\" % roc_auc2)\n",
        "plt.plot(fpr3, tpr3, label= \"Random Forest Classifier(area = %0.2f)\" % roc_auc3)\n",
        "plt.plot(fpr4, tpr4, label= \"Multinomial Naive Bayes(area = %0.2f)\" % roc_auc4)\n",
        "plt.legend()\n",
        "plt.xlabel(\"False Positive Rate\")\n",
        "plt.ylabel(\"True Positive Rate\")\n",
        "plt.title('Receiver Operating Characteristic')\n",
        "plt.show()"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Vsb7aphUeuw4"
      },
      "source": [
        "##2.5 Combined PR Curve"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "htjdtmanq57r"
      },
      "source": [
        "# example of a precision-recall curve for a predictive model\n",
        "from sklearn.datasets import make_classification\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import precision_recall_curve\n",
        "from matplotlib import pyplot\n",
        "from sklearn.metrics import auc\n"
      ],
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zetsk38cq5iq"
      },
      "source": [
        "# predict probabilities\n",
        "yhat1 = logreg.predict_proba(x_testvec)\n",
        "yhat2 = svc.predict_proba(x_testvec)\n",
        "yhat3 = rfc.predict_proba(x_testvec)\n",
        "yhat4 = mnb.predict_proba(x_testvec)\n",
        "# retrieve just the probabilities for the positive class\n",
        "pos_probs1 = yhat1[:, 1]\n",
        "pos_probs2 = yhat2[:, 1]\n",
        "pos_probs3 = yhat3[:, 1]\n",
        "pos_probs4 = yhat4[:, 1]\n",
        "# calculate the no skill line as the proportion of the positive class\n",
        "no_skill = len(y[y==1]) / len(y)"
      ],
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "II3nDNums4So",
        "outputId": "15fc05ef-1b47-4990-de1c-03888e2da171"
      },
      "source": [
        "# plot the no skill precision-recall curve\n",
        "pyplot.plot([0, 1], [no_skill, no_skill], linestyle='--', label='No Skill')\n",
        "\n",
        "# calculate the precision-recall auc\n",
        "precision1, recall1, _ = precision_recall_curve(y_test, pos_probs1)\n",
        "precision2, recall2, _ = precision_recall_curve(y_test, pos_probs2)\n",
        "precision3, recall3, _ = precision_recall_curve(y_test, pos_probs3)\n",
        "precision4, recall4, _ = precision_recall_curve(y_test, pos_probs4)\n",
        "\n",
        "auc_score1 = auc(recall1, precision1)\n",
        "auc_score2 = auc(recall2, precision2)\n",
        "auc_score3 = auc(recall3, precision3)\n",
        "auc_score4 = auc(recall4, precision4)\n",
        "\n",
        "\n",
        "# calculate model precision-recall curve\n",
        "precision1, recall1, _ = precision_recall_curve(y_test, pos_probs1)\n",
        "precision2, recall2, _ = precision_recall_curve(y_test, pos_probs2)\n",
        "precision3, recall3, _ = precision_recall_curve(y_test, pos_probs3)\n",
        "precision4, recall4, _ = precision_recall_curve(y_test, pos_probs4)\n",
        "\n",
        "# plot the model precision-recall curve\n",
        "pyplot.plot(recall1, precision1, linestyle='-', label='Logistic Regression(AUC:%.3f)'% auc_score1)\n",
        "pyplot.plot(recall2, precision2, linestyle='-', label='SVC(AUC:%.3f)'% auc_score2)\n",
        "pyplot.plot(recall3, precision3, linestyle='-', label='Random Forest Classifier(AUC:%.3f)'% auc_score3)\n",
        "pyplot.plot(recall4, precision4, linestyle='-', label='Multinomial Naive Bayes(AUC:%.3f)'% auc_score4)\n",
        "\n",
        "# axis labels\n",
        "pyplot.xlabel('Recall')\n",
        "pyplot.ylabel('Precision')\n",
        "# show the legend\n",
        "pyplot.legend()\n",
        "# show the plot\n",
        "pyplot.show()"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wNaij4UTTkk5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "857ae9e1-cae8-4ee0-8a5c-a8dc4402c0de"
      },
      "source": [
        "print(1 - y_test.mean()) #null accuracy"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.9478186484174508\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}